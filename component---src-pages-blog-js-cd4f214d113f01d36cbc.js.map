{"version":3,"file":"component---src-pages-blog-js-cd4f214d113f01d36cbc.js","mappings":"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","sources":["webpack://e-trifonova/./src/components/breadcrumb/breadcrumb.js","webpack://e-trifonova/./src/components/header/header.js","webpack://e-trifonova/./src/components/footer/footer.js","webpack://e-trifonova/./src/components/layout/layout.js","webpack://e-trifonova/./src/components/seo.js","webpack://e-trifonova/./src/components/sidebar/sidebar.js","webpack://e-trifonova/./src/pages/blog.js"],"sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport \"./breadcrumb.css\"\r\n\r\nconst BreadCrumb = ({ category, postTitle }) => (\r\n  <div className=\"breadcrumb_container\">\r\n    <Link className=\"breadcrumb_link\"to=\"/\">\r\n      <span>На главную</span>\r\n    </Link>\r\n    <div className=\"arrow__container\"><i className=\"arrow right\"></i></div>\r\n    <Link className=\"breadcrumb_link\" to=\"/blog\">\r\n      <span>Блог</span>\r\n    </Link>\r\n    \r\n    {category ? (\r\n      <>\r\n    <div className=\"arrow__container\"><i className=\"arrow right\"></i></div>\r\n        <Link className=\"breadcrumb_link\" to=\"/\">\r\n      <span>{category}</span>\r\n        </Link>\r\n      </>\r\n    ) : null}\r\n\r\n    \r\n    {postTitle ? (\r\n      <>\r\n    <div className=\"arrow__container\"><i className=\"arrow right\"></i></div>\r\n        <Link className=\"breadcrumb_link\" to=\"/\">\r\n      <span>{postTitle}</span>\r\n        </Link>\r\n      </>\r\n    ) : null}\r\n  </div>\r\n)\r\n\r\nexport default BreadCrumb\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Logo from \"../../assets/svg/logo.svg\";\r\nimport \"./header.css\";\r\n\r\nconst Header = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <header className=\"grid-container\">\r\n      <div className=\"header__container\">\r\n        <Link className=\"header__logo\" to=\"/\">\r\n          <Logo className=\"header__logo-img\" />\r\n        </Link>\r\n\r\n        {/* Burger Menu Button */}\r\n        <button\r\n          className=\"burger-menu\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          ☰\r\n        </button>\r\n\r\n        {/* Navigation */}\r\n        <nav className={`nav ${isOpen ? \"nav--open\" : \"\"}`}>\r\n          <ul className=\"nav__list\">\r\n            <li className=\"nav__list-item\">\r\n              <Link className=\"nav__link\" to=\"/about\" activeClassName=\"active\">\r\n                Автор\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav__list-item\">\r\n              <Link className=\"nav__link\" to=\"/blog\" activeClassName=\"active\">\r\n                Блог\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav__list-item\">\r\n              <Link className=\"nav__link\" to=\"/verbsExerciser\" activeClassName=\"active\">\r\n                Глаголы\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport \"./footer.css\"\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"grid-container\">\r\n      <div className=\"footer_copyright\">\r\n        © {new Date().getFullYear()} &middot; Елена Трифонова\r\n      </div>\r\n      {/* <div className=\"footer_social-list\">\r\n        <ul>\r\n          <li>\r\n            <a\r\n              href=\"https://web.telegram.org/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <div className=\"footer_icon\">TG</div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"https://vk.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <div className=\"footer_icon\">VK</div>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"https://github.com/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <div className=\"footer_icon\">GH</div>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div> */}\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nimport Header from \"../header/header\"\r\nimport Footer from \"../footer/footer\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query SiteTitleQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  return (\r\n    <div className=\"page-container\">\r\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\r\n      <main className=\"grid-container\">{children}</main>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import * as React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n          author\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const metaDescription = description || site.siteMetadata.description;\r\n  const defaultTitle = site.siteMetadata?.title;\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Seo;\r\n","import React from \"react\";\r\nimport \"./sidebar.css\";\r\n\r\nconst sidebar = ({ category }) => {\r\n  return (\r\n    <div className=\"sidebar_container\">\r\n      <h4>Категории:</h4>\r\n      <div className=\"sidebar_container-categories\">{category}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default sidebar;\r\n","import React, { useState } from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport BreadCrumb from \"../components/breadcrumb/breadcrumb\"\r\nimport Sidebar from \"../components/sidebar/sidebar\"\r\n\r\nexport default function Blog({ data }) {\r\n  const posts = data.allWpPost.nodes\r\n\r\n  // State to track selected category and current page\r\n  const [selectedCategory, setSelectedCategory] = useState(null)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n\r\n\r\n  // Collect all categories across posts\r\n  const allCategories = posts.flatMap(post =>\r\n    post.categories.nodes.map(category => category.name)\r\n  );\r\n\r\n  // Filter unique categories using Set\r\n  const uniqueCategories = [...new Set(allCategories)];\r\n\r\n  // Function to handle category selection\r\n  const handleCategoryClick = (category) => {\r\n    setSelectedCategory(category === selectedCategory ? null : category);\r\n    setCurrentPage(1); // Reset to the first page when selecting a new category\r\n  };\r\n\r\n   // Function to reset the filter\r\n  const resetFilter = () => {\r\n    setSelectedCategory(null); // Reset to show all posts\r\n  };\r\n\r\n  // Filter posts by selected category\r\n  const filteredPosts = selectedCategory\r\n    ? posts.filter(post =>\r\n        post.categories.nodes.some(category => category.name === selectedCategory)\r\n      )\r\n    : posts; // Show all posts if no category is selected\r\n\r\n\r\n  // Constants for pagination\r\n  const postsPerPage = 5\r\n  // Calculate total pages based on the filtered posts\r\nconst totalPosts = filteredPosts.length\r\nconst totalPages = Math.ceil(totalPosts / postsPerPage)\r\n\r\n  // Calculate start and end index for posts based on current page\r\n  const startIndex = (currentPage - 1) * postsPerPage\r\n  const endIndex = startIndex + postsPerPage\r\n\r\n  // Get posts to display based on pagination\r\n  const paginatedPosts = filteredPosts.slice(startIndex, endIndex)\r\n\r\n// Scroll to bottom function\r\nconst scrollToBottom = () => {\r\n  window.scrollTo({\r\n    top: document.body.scrollHeight,\r\n    behavior: 'smooth',\r\n  });\r\n};\r\n\r\n// Updated pagination handlers\r\nconst nextPage = () => {\r\n  setCurrentPage(prev => {\r\n    const newPage = Math.min(prev + 1, totalPages);\r\n    if (newPage !== prev) scrollToBottom();\r\n    return newPage;\r\n  });\r\n};\r\n\r\nconst prevPage = () => {\r\n  setCurrentPage(prev => {\r\n    const newPage = Math.max(prev - 1, 1);\r\n    if (newPage !== prev) scrollToBottom();\r\n    return newPage;\r\n  });\r\n};\r\n\r\n  const category = (\r\n    <ul className=\"category_list\">\r\n      {uniqueCategories.map((category, index) => (\r\n        <li key={index}>\r\n          <button\r\n            onClick={() => handleCategoryClick(category)}\r\n            className={selectedCategory === category ? 'active category_btn' : 'category_btn'}\r\n          >\r\n            {category}\r\n          </button>\r\n        </li>\r\n      ))}\r\n      <button className=\"category_btn filter_btn\" onClick={resetFilter}>Сбросить фильтр</button>\r\n    </ul>\r\n  );\r\n\r\n  // Function to limit excerpt length and add link\r\n  const getLimitedExcerpt = (htmlString, charLimit, slug) => {\r\n    // Remove HTML tags\r\n    const textOnly = htmlString.replace(/<[^>]+>/g, '');\r\n    // Truncate to specified length and add link if truncated\r\n    if (textOnly.length > charLimit) {\r\n      return (\r\n        <>\r\n          {textOnly.substring(0, charLimit)}\r\n          <Link to={`/blog/${slug}`} className=\"read-more\"> [...]</Link>\r\n        </>\r\n      );\r\n    }\r\n    return textOnly;\r\n  };\r\n\r\n  console.log(posts)\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"blog\" />\r\n      <section className=\"blog\">\r\n        <BreadCrumb className=\"blog__breadcrumb\" />\r\n        <Sidebar className=\"blog_sidebar\" category={category} />\r\n        <div className=\"blog__posts\">\r\n          <h1>Блог</h1>\r\n          <h4>{selectedCategory ? `Посты в категории \"${selectedCategory}\"` : 'Все посты'}</h4>\r\n\r\n          {paginatedPosts.length > 0 ? paginatedPosts.map(post => (\r\n            <div key={post.slug}>\r\n              <Link to={post.slug}>\r\n                <p>{post.title}</p>\r\n              </Link>\r\n              <p className=\"post_category\" >Категория: {post.categories.nodes.map(category => category.name).join(\", \")}</p>\r\n              <p className=\"blog__post-excerpt\">{getLimitedExcerpt(post.excerpt, 200, post.slug)}</p>\r\n            </div>\r\n          )) : <p className=\"post_category\">Постов не найдено.</p>}\r\n\r\n          {/* Pagination controls */}\r\n          <div className=\"pagination\">\r\n            {currentPage > 0 && (\r\n              <button className=\"pagination-btn\" onClick={prevPage} disabled={currentPage === 1}>&#8592;</button>\r\n            )}\r\n            <span>Страница {currentPage} из {totalPages}</span>\r\n            {currentPage <= totalPages && (\r\n              <button className=\"pagination-btn\" onClick={nextPage} disabled={currentPage === totalPages}>&#8594;</button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPostsQuery {\r\n    allWpPost(sort: { date: DESC }) {\r\n      nodes {\r\n        title\r\n        excerpt\r\n        content\r\n        slug\r\n        categories {\r\n          nodes {\r\n            name\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["category","postTitle","className","to","isOpen","setIsOpen","useState","onClick","activeClassName","Date","getFullYear","children","data","useStaticQuery","siteTitle","site","siteMetadata","title","description","metaDescription","defaultTitle","name","content","property","author","Blog","posts","allWpPost","nodes","selectedCategory","setSelectedCategory","currentPage","setCurrentPage","allCategories","flatMap","post","categories","map","uniqueCategories","Set","filteredPosts","filter","some","totalPosts","length","totalPages","Math","ceil","startIndex","endIndex","paginatedPosts","slice","scrollToBottom","window","scrollTo","top","document","body","scrollHeight","behavior","index","key","handleCategoryClick","console","log","slug","join","htmlString","charLimit","textOnly","replace","substring","getLimitedExcerpt","excerpt","prev","newPage","max","disabled","min"],"sourceRoot":""}